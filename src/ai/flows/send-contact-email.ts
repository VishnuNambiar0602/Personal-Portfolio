// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for sending a contact email.
 *
 * @exports sendContactEmail - An async function that sends a contact email.
 * @exports SendContactEmailInput - The input type for the sendContactEmail function.
 * @exports SendContactEmailOutput - The output type for the sendContactEmail function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SendContactEmailInputSchema = z.object({
  name: z.string().describe('The name of the person sending the email.'),
  email: z.string().email().describe('The email address of the sender.'),
  message: z.string().describe('The content of the message.'),
});

export type SendContactEmailInput = z.infer<
  typeof SendContactEmailInputSchema
>;

const SendContactEmailOutputSchema = z.object({
  success: z.boolean().describe('Whether the email was sent successfully.'),
  message: z.string().describe('A status message.'),
});

export type SendContactEmailOutput = z.infer<
  typeof SendContactEmailOutputSchema
>;

export async function sendContactEmail(
  input: SendContactEmailInput
): Promise<SendContactEmailOutput> {
  return sendContactEmailFlow(input);
}

const sendContactEmailFlow = ai.defineFlow(
  {
    name: 'sendContactEmailFlow',
    inputSchema: SendContactEmailInputSchema,
    outputSchema: SendContactEmailOutputSchema,
  },
  async input => {
    console.log('Received contact form submission:', input);
    // In a real application, you would add your email sending logic here.
    // For example, using a service like SendGrid, Nodemailer, or Resend.
    return {
      success: true,
      message: 'Your message has been sent successfully!',
    };
  }
);
