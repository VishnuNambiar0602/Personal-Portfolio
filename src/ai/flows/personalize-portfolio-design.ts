// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for personalizing the portfolio's design based on user interactions, including dynamically applying custom animations.
 *
 * @exports personalizePortfolioDesign - An async function that personalizes the portfolio design.
 * @exports PersonalizePortfolioDesignInput - The input type for the personalizePortfolioDesign function.
 * @exports PersonalizePortfolioDesignOutput - The output type for the personalizePortfolioDesign function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PersonalizePortfolioDesignInputSchema = z.object({
  userInteraction: z
    .string()
    .describe(
      'Description of the user interaction with the portfolio (e.g., button click, hover event, page scroll).'
    ),
  currentDesignState: z
    .string()
    .describe(
      'Current state of the portfolio design (e.g., color scheme, font, layout).'
    ),
});

export type PersonalizePortfolioDesignInput = z.infer<
  typeof PersonalizePortfolioDesignInputSchema
>;

const PersonalizePortfolioDesignOutputSchema = z.object({
  suggestedAnimations: z
    .array(z.string())
    .describe(
      'A list of animation suggestions based on the user interaction, such as fade-in, slide-in, or zoom effects.'
    ),
  designAdjustments: z
    .string()
    .describe(
      'Description of design adjustments to enhance user engagement, such as color scheme changes or layout modifications.'
    ),
});

export type PersonalizePortfolioDesignOutput = z.infer<
  typeof PersonalizePortfolioDesignOutputSchema
>;

export async function personalizePortfolioDesign(
  input: PersonalizePortfolioDesignInput
): Promise<PersonalizePortfolioDesignOutput> {
  return personalizePortfolioDesignFlow(input);
}

const personalizePortfolioDesignPrompt = ai.definePrompt({
  name: 'personalizePortfolioDesignPrompt',
  input: {schema: PersonalizePortfolioDesignInputSchema},
  output: {schema: PersonalizePortfolioDesignOutputSchema},
  prompt: `Based on the user's interaction with the portfolio and the current design state, suggest appropriate animations and design adjustments to enhance user engagement.

User Interaction: {{{userInteraction}}}
Current Design State: {{{currentDesignState}}}

Consider the following:
- Animation suggestions should be subtle and enhance the user experience without being distracting.
- Design adjustments should align with the overall aesthetic of the portfolio and improve usability.
- Provide specific examples of animations and design changes that can be implemented.
`,
});

const personalizePortfolioDesignFlow = ai.defineFlow(
  {
    name: 'personalizePortfolioDesignFlow',
    inputSchema: PersonalizePortfolioDesignInputSchema,
    outputSchema: PersonalizePortfolioDesignOutputSchema,
  },
  async input => {
    const {output} = await personalizePortfolioDesignPrompt(input);
    return output!;
  }
);
